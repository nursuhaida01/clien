import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../client.dart';
import '../coding/dialog.dart';
import '../database/db_helper.dart';


class Class {
  final DatabaseHelper dbHelper = DatabaseHelper.instance;

  late ClientModel clientModel;
  Class() {
    clientModel = ClientModel(
      hostname: '192.168.0.104',
      port: 9000,
      onData: (data) {
        debugPrint('‚úÖ Data received: ${String.fromCharCodes(data)}');
      },
      onError: (error) {
        debugPrint('‚ùå Error: $error');
      },
      onStatusChange: (status) {
        debugPrint('üîÑ Status: $status');
      },
    );

    debugPrint("üîó ClientModel Initialized");
  }
  Future<void> UpdateQueue({
    required BuildContext context,
    required String searchStatus,
    required int queueId,   
    required int serviceId,
  }) async {
    try {
      debugPrint(" ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Queue ID: $queueId, Service ID: $serviceId");
  final String now = DateFormat('yyyy-MM-dd HH:mm:ss').format(DateTime.now());

      //  ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      final queue = await dbHelper.getQueueByIdAndService(queueId, serviceId);

      if (queue == null) {
        debugPrint("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (queueId: $queueId, serviceId: $serviceId)");
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï')),
        );
        return;
      }

      debugPrint(" ‡∏û‡∏ö Queue: ID: ${queue.id}, No: ${queue.queueNo}, Status: ${queue.queueStatus}");

      //  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏¥‡∏ß" ‡πÉ‡∏ô Service ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final existingCallingQueue = await dbHelper.getCallingQueueByService(serviceId);

      if (existingCallingQueue != null) {
        debugPrint("‚ö†Ô∏è ‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Service ID: $serviceId");
        await DialogHelper.showCustomDialog(
          context,
          "",
          "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô",
          Icons.surround_sound,
        );
        return;
      }

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏û‡∏±‡∏Å‡∏Ñ‡∏¥‡∏ß"
      if (queue.queueStatus == '‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£' || queue.queueStatus == '‡∏û‡∏±‡∏Å‡∏Ñ‡∏¥‡∏ß') {
        await dbHelper.updateQueueStatus(queueId, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏¥‡∏ß', now);
        debugPrint("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: Queue ID: ${queue.id}, No: ${queue.queueNo}");

        // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Dialog ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        await DialogHelper.showCustomDialog(
          context,
          "",
          " ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏¥‡∏ß ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç: ${queue.queueNo}",
          Icons.surround_sound,
        );
      } else {
        debugPrint("‚ö†Ô∏è ‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ");
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('‚ö†Ô∏è ‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ')),
        );
      }
    } catch (error) {
      debugPrint(" Error updating queue: $error");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(' ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $error')),
      );
    }
  }
}

// ‚úÖ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Widget
class QueuePage extends StatelessWidget {
  final Class classCaller = Class();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Queue Management')),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏û‡∏±‡∏Å‡∏Ñ‡∏¥‡∏ß" ‡∏Ç‡∏≠‡∏á `serviceId`
            final queue = await DatabaseHelper.instance.getFirstQueueByStatus("‡∏û‡∏±‡∏Å‡∏Ñ‡∏¥‡∏ß");

            if (queue != null) {
              await classCaller.UpdateQueue(
                context: context,
                searchStatus: '‡∏û‡∏±‡∏Å‡∏Ñ‡∏¥‡∏ß',
                queueId: queue.id!,  // ‚úÖ ‡πÉ‡∏ä‡πâ queueId ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                serviceId: queue.serviceId!, // ‚úÖ ‡πÉ‡∏ä‡πâ serviceId ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
              );
            } else {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏û‡∏±‡∏Å‡∏Ñ‡∏¥‡∏ß"')),
              );
            }
          },
          child: const Text('üéØ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏¥‡∏ß'),
        ),
      ),
    );
  }
}
