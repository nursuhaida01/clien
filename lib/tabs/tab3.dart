import 'package:flutter/material.dart';
import 'package:hive/hive.dart';
import '../api/callqueue.dart';
import '../client.dart';
import '../coding/dialog.dart';
import '../database/db_helper.dart';
import '../loadingsreen.dart';
import '../model/queue_model.dart';

class Tab3 extends StatefulWidget {
  const Tab3({
    super.key,
    required this.tabController,
    required this.filteredQueues1Notifier,
    required this.filteredQueues3Notifier,
    required this.filteredQueuesANotifier,
  });

  @override
  _Tab3State createState() => _Tab3State();
  final TabController tabController;
  final ValueNotifier<List<Map<String, dynamic>>> filteredQueues1Notifier;
  final ValueNotifier<List<Map<String, dynamic>>> filteredQueues3Notifier;
  final ValueNotifier<List<Map<String, dynamic>>> filteredQueuesANotifier;
}

class _Tab3State extends State<Tab3> {
  final DatabaseHelper dbHelper = DatabaseHelper.instance;
  List<QueueModel> queueList = [];
  bool _isLoading = true;
  late ClientModel clientModel;
     List<Map<String, String>> savedData = [];

  @override
  void initState() {
    super.initState();
    _loadQueueData();
      // ‚úÖ ‡∏î‡∏∂‡∏á IP ‡∏à‡∏≤‡∏Å Hive
    loadSavedIpAndConnect();
  }
 // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á IP Address ‡∏à‡∏≤‡∏Å Hive ‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  Future<void> loadSavedIpAndConnect() async {
    var box = await Hive.openBox('ipBox'); // ‡πÄ‡∏õ‡∏¥‡∏î Hive Box
    String savedIp = box.get('savedIP',
        defaultValue: '192.168.0.104'); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ IP ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ Default

    print("üåê IP ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Hive: $savedIp");

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á ClientModel ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ IP ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
    clientModel = ClientModel(
      hostname: savedIp, // ‡πÉ‡∏ä‡πâ IP ‡∏à‡∏≤‡∏Å Hive
      port: 9000,
      onData: (data) {
        debugPrint('üì• Data received: ${String.fromCharCodes(data)}');
      },
      onError: (error) {
        debugPrint('‚ùå Error: $error');
      },
      onStatusChange: (status) {
        debugPrint('üîÑ Status: $status');
      },
    );

    // ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Server
    clientModel.connect();
    print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Server ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
  }

  void loadFromHive() async {
    var box = Hive.box('savedDataBox');
    List<Map<String, String>>? loadedData = List<Map<String, String>>.from(
      box.get('savedData', defaultValue: []),
    );

    setState(() {
      savedData = loadedData;
    });
  }
  void saveToHive() async {
    var box = Hive.box('savedDataBox');
    await box.put('savedData', savedData);
  }

  Future<void> _loadQueueData() async {
    try {
      final queues = await dbHelper.queryByStatus("‡∏û‡∏±‡∏Å‡∏Ñ‡∏¥‡∏ß");
      setState(() {
        queueList = queues; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô state
        _isLoading = false; // ‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î
      });
    } catch (error) {
      setState(() {
        _isLoading = false; // ‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $error')),
      );
    }
  }

  String formatTime(String? datetime) {
    if (datetime == null || datetime.isEmpty) {
      return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤"; // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
    }
    DateTime dateTime = DateTime.parse(datetime);
    return "${dateTime.hour.toString().padLeft(2, '0')}:${dateTime.minute.toString().padLeft(2, '0')}";
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    final buttonHeight = size.height * 0.06;
    const double fontSize = 20; // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå

    return _isLoading
        ? const Center(child: CircularProgressIndicator()) // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î
        : queueList.isEmpty
            ? const Center(child: Text('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö')) // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            : ListView.builder(
                itemCount: queueList.length,
                itemBuilder: (context, index) {
                  final queue = queueList[index];
                  return Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Card(
                      elevation: 3,
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(
                                  '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${queue.queueStatus}',
                                  style: TextStyle(
                                    fontSize: 14,
                                    color: queue.queueStatus == "‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"
                                        ? Colors.orange
                                        : Colors.green,
                                  ),
                                ),
                              ],
                            ),
                            const SizedBox(height: 16.0),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceAround,
                              children: [
                                Expanded(
                                  flex: 1,
                                  child: _buildText(
                                    "${queue.queueNo}",
                                    fontSize * 1.5,
                                    const Color(0xFF099FAF),
                                  ),
                                ),
                                Expanded(
                                  flex: 2,
                                  child: _buildText(
                                    "Name: ${queue.customerName}",
                                    fontSize,
                                    const Color(0xFF099FAF),
                                  ),
                                ),
                                Expanded(
                                  flex: 2,
                                  child: _buildText(
                                    "Phone: ${queue.customerPhone}",
                                    fontSize,
                                    const Color(0xFF099FAF),
                                  ),
                                ),
                              ],
                            ),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceAround,
                              children: [
                                Expanded(
                                  flex: 1,
                                  child: _buildText(
                                    "Number\n${queue.queueNumber} PAX",
                                    fontSize,
                                    const Color.fromARGB(255, 144, 148, 148),
                                  ),
                                ),
                                const SizedBox(width: 5),
                                Expanded(
                                  flex: 1,
                                  child: _buildText(
                                    "Queue\n${formatTime(queue.queueDatetime)}",
                                    fontSize,
                                    const Color.fromARGB(255, 144, 148, 148),
                                  ),
                                ),
                                const SizedBox(width: 5),
                                Expanded(
                                  flex: 1,
                                  child: _buildElevatedButton(
                                    'End',
                                    const Color.fromARGB(255, 255, 0, 0),
                                    buttonHeight,
                                    (context) async {
                                      await _endQueue(context, queue);
                                    },
                                  ),
                                ),
                                const SizedBox(width: 5),
                                Expanded(
                                  flex: 1,
                                  child: _buildElevatedButton(
                                    'Call',
                                    const Color(0xFF099FAF),
                                    buttonHeight,
                                    (context) async {
                                      await _callQueue(context, queue);
                                    },
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ),
                  );
                },
              );
  }

  Widget _buildText(String text, double size, Color color) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8.0),
      child: Text(
        text,
        style: TextStyle(
          fontSize: size,
          color: color,
        ),
        textAlign: TextAlign.center,
      ),
    );
  }

  Widget _buildElevatedButton(
    String label,
    Color color,
    double height,
    Future<void> Function(BuildContext) onPressed,
  ) {
    return SizedBox(
      height: height,
      child: ElevatedButton(
        onPressed: () => onPressed(context),
        style: ElevatedButton.styleFrom(
          foregroundColor: Colors.white,
          backgroundColor: color,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
        ),
        child: Text(
          label,
          style: const TextStyle(fontSize: 20),
        ),
      ),
    );
  }

  Future<void> _showReasonDialog(
    BuildContext context,
    String title,
    String message,
    IconData icon,
  ) async {
    showDialog<void>(
      context: context,
      barrierDismissible: false, // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î Dialog ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡∏∞‡∏ô‡∏≠‡∏Å Dialog
      builder: (BuildContext dialogContext) {
        Future.delayed(const Duration(seconds: 3), () {
          Navigator.of(dialogContext).pop(); // ‡∏õ‡∏¥‡∏î Dialog ‡∏´‡∏•‡∏±‡∏á 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        });
        return Center(
          child: Material(
            color: Colors.transparent,
            child: Container(
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(12),
                boxShadow: const [
                  BoxShadow(
                    color: Colors.black26,
                    blurRadius: 10,
                    spreadRadius: 2,
                  ),
                ],
              ),
              padding: const EdgeInsets.all(16),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: <Widget>[
                  Icon(icon, color: Colors.red, size: 70),
                  const SizedBox(height: 10),
                  Text(
                    title,
                    style: const TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 10),
                  Text(
                    message,
                    style: const TextStyle(fontSize: 16),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 20),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Future<void> _endQueue(BuildContext context, QueueModel queue) async {
    setState(() {
      _isLoading = true; // ‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î
    });

    try {
      final db = await DatabaseHelper.instance.database;

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô "‡∏à‡∏ö‡∏Ñ‡∏¥‡∏ß"
      final rowsAffected = await db.update(
        'queue_tb', // ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        {'queue_status': '‡∏à‡∏ö‡∏Ñ‡∏¥‡∏ß'}, // ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        where: 'queue_no = ?', // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏¥‡∏ß
        whereArgs: [queue.queueNo], // ‡πÉ‡∏ä‡πâ queueNo ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß
      );

      if (rowsAffected > 0) {
        // ‡πÅ‡∏™‡∏î‡∏á Dialog ‡∏ß‡πà‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        await _showReasonDialog(
          context,
          'End Queue',
          'Queue ${queue.queueNo} has been ended successfully.',
          Icons.check_circle,
        );

        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        setState(() {
          _loadQueueData(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        });
      } else {
        // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï')),
        );
      }
    } catch (error) {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $error')),
      );
    } finally {
      setState(() {
        _isLoading = false; // ‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î
      });
    }
  }

 Future<void> _callQueue(BuildContext context, QueueModel queue) async {
  await Navigator.push(
    context,
    MaterialPageRoute(
      builder: (context) => LoadingScreen(
        onComplete: () async {
          debugPrint("üéØ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏¥‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô...");

          // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏¥‡∏ß
          final existingCallingQueue = await dbHelper.getCallingQueueByService(queue.serviceId!);

          if (existingCallingQueue != null) {
            debugPrint("‚ö†Ô∏è ‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Service ID: ${queue.serviceId}");
            await DialogHelper.showCustomDialog(
              context,
              "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
              "‚ö†Ô∏è ‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏≠‡∏¢‡∏π‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô",
              Icons.warning,
            );
            return; // ‚ùå ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
          }

          // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å -> ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏¥‡∏ß
          await Class().UpdateQueue(
            context: context,
            searchStatus: '‡∏û‡∏±‡∏Å‡∏Ñ‡∏¥‡∏ß',
            queueId: queue.id!,
            serviceId: queue.serviceId!,
          );

          // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö clientModel ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          if (clientModel.isConnected) {
            debugPrint("üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Client: ${queue.queueNo}");
            clientModel.write(queue.queueNo);
          } else {
            debugPrint("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: client ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠");
          }

          // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö‡πÅ‡∏£‡∏Å
          widget.tabController.animateTo(0);
        },
      ),
    ),
  );
}
}
