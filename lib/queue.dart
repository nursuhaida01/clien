import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../database/db_helper.dart';
import '../model/queue_model.dart';
import 'coding/dialog.dart';
import 'home_page.dart';
import 'providers/dataProvider.dart';
import 'providers/queue_provider.dart';

class DisplayDataPage extends StatefulWidget {
  const DisplayDataPage({Key? key}) : super(key: key);

  @override
  _DisplayDataPageState createState() => _DisplayDataPageState(); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ô‡∏µ‡πâ
}

class _DisplayDataPageState extends State<DisplayDataPage> {
  bool _isLoading = false; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î
   // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ValueNotifier ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  final ValueNotifier<List<Map<String, dynamic>>> filteredQueues1Notifier = ValueNotifier([]);
  final ValueNotifier<List<Map<String, dynamic>>> filteredQueues3Notifier = ValueNotifier([]);
  final ValueNotifier<List<Map<String, dynamic>>> filteredQueuesANotifier = ValueNotifier([]);
  List<Map<String, dynamic>> T2OK = []; // ‚úÖ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ T2OK
Map<dynamic, List<Map<String, dynamic>>> TQOKK = {}; // ‚úÖ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ TQOKK


  String formatTimeOnly(String? datetime) {
    if (datetime == null || datetime.isEmpty) {
      return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤"; // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
    }
    DateTime dateTime = DateTime.parse(datetime);

    // ‡πÉ‡∏ä‡πâ padLeft(2, '0') ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏™‡∏°‡∏≠
    String hour = dateTime.hour.toString().padLeft(2, '0');
    String minute = dateTime.minute.toString().padLeft(2, '0');

    return "$hour:$minute";
  }

//  Future<void> clearAllQueues(BuildContext context) async {
//   try {
//     setState(() {
//       _isLoading = true;
//     });

//     await DatabaseHelper.instance.clearAll('queue_tb');
//     final provider = Provider.of<QueueProvider>(context, listen: false);
//     await provider.reloadServices();
//     provider.notifyListeners();

//     // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô ValueNotifier
//     filteredQueues1Notifier.value = [];
//     filteredQueues3Notifier.value = [];
//     filteredQueuesANotifier.value = [];

//     // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Widget ‡∏ó‡∏µ‡πà‡∏ü‡∏±‡∏á ValueNotifier ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
//     filteredQueues1Notifier.notifyListeners();
//     filteredQueues3Notifier.notifyListeners();
//     filteredQueuesANotifier.notifyListeners();

//     await DialogHelper.showInfoDialog(
//       context: context,
//       title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
//       message: "‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
//       icon: Icons.check_circle,
//     );

//     Navigator.of(context).pushReplacement(
//       MaterialPageRoute(builder: (context) => const DisplayDataPage()),
//     );

//     setState(() {
//       _isLoading = false;
//     });
//   } catch (e) {
//     await DialogHelper.showInfoDialog(
//       context: context,
//       title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
//       message: "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e",
//       icon: Icons.error,
//     );

//     setState(() {
//       _isLoading = false;
//     });
//   }
// }
 Future<void> clearAllQueues(BuildContext context) async {
    try {
      await DatabaseHelper.instance.clearAll('queue_tb'); // ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      final provider = Provider.of<QueueProvider>(context, listen: false);
      await provider.reloadServices(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      provider.notifyListeners(); // ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ UI ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
 setState(() {
      T2OK.clear();   
      TQOKK.clear();  
    });
      // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Dialog ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡πÄ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      await DialogHelper.showInfoDialog(
        context: context,
        title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        message: " ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        icon: Icons.check_circle,
      );

      // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á DisplayDataPage() ‡∏´‡∏•‡∏±‡∏á Dialog ‡∏õ‡∏¥‡∏î
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(builder: (context) => const DisplayDataPage()),
      );
    } catch (e) {
      // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Dialog ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      await DialogHelper.showInfoDialog(
        context: context,
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        message: " ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e",
        icon: Icons.error,
      );
    }
  }


  Color _getStatusColor(String status) {
    const statusColors = {
      "‡∏û‡∏±‡∏Å‡∏Ñ‡∏¥‡∏ß": Color.fromARGB(255, 255, 140, 0), // üüß ‡∏™‡∏µ‡∏™‡πâ‡∏°‡πÄ‡∏Ç‡πâ‡∏°
      "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å": Color.fromARGB(255, 220, 20, 60), // üî¥ ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÄ‡∏Ç‡πâ‡∏°
      "‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£": Color.fromARGB(255, 34, 139, 34), // üü¢ ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ
      "‡∏à‡∏ö‡∏Ñ‡∏¥‡∏ß": Color.fromARGB(255, 220, 20, 60), // üü£ ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á
    };

    return statusColors[status] ?? const Color.fromARGB(255, 144, 148, 148);
  }

  String _getStatusText(String status) {
    switch (status) {
      case "‡∏û‡∏±‡∏Å‡∏Ñ‡∏¥‡∏ß":
        return "Hold";
      case "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å":
        return "Cancel";
      case "‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£":
        return "End ";
      case "‡∏à‡∏ö‡∏Ñ‡∏¥‡∏ß":
        return "End";
      default:
        return status; // ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
    }
  }

  @override
  Widget build(BuildContext context) {
    final hiveData = Provider.of<DataProvider>(context);
    final size = MediaQuery.of(context).size;
    final buttonHeight = size.height * 0.05; // 5% ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    final fontSize = size.height * 0.02;
    return Scaffold(
      appBar: AppBar(
  title: const Text(
    '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß',
    style: TextStyle(
      fontWeight: FontWeight.bold,
      color: Colors.white,
    ),
  ),
  backgroundColor: const Color.fromRGBO(9, 159, 175, 1.0),
  elevation: 0,

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° Back ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ
  leading: IconButton(
    icon: const Icon(Icons.arrow_back, color: Colors.white), // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß
    onPressed: () {
    Future.delayed(const Duration(seconds: 1), () {
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(
            builder: (context) => const MyHomePage(title: 'AP Queue')),
      );
    });
    },
  ),

  actions: [
    IconButton(
      icon: const Icon(Icons.delete, color: Colors.white), // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏•‡∏ö
      onPressed: () async {
        bool confirm = await showDialog(
          context: context,
          barrierDismissible: false,
          builder: (context) => AlertDialog(
            title: Row(
              children: [
                Icon(
                  Icons.warning,
                  color: Colors.orange,
                  size: fontSize * 1.5,
                ),
                SizedBox(width: size.width * 0.02),
                Flexible(
                  child: Text(
                    '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö',
                    style: TextStyle(fontSize: fontSize),
                  ),
                ),
              ],
            ),
            content: Text(
              '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n(‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å)',
              style: TextStyle(fontSize: fontSize),
              textAlign: TextAlign.center,
            ),
            contentPadding: EdgeInsets.symmetric(
              vertical: size.height * 0.02,
              horizontal: size.width * 0.0001,
            ),
            actions: <Widget>[
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Expanded(
                    child: ElevatedButton(
                      onPressed: () {
                        Navigator.pop(context);
                      },
                      style: ElevatedButton.styleFrom(
                        foregroundColor: Colors.white,
                        backgroundColor: const Color.fromARGB(255, 255, 0, 0),
                        padding: EdgeInsets.symmetric(
                            vertical: size.height * 0.02),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      child: Text(
                        '‡∏õ‡∏¥‡∏î|CLOSE',
                        style: TextStyle(fontSize: fontSize),
                      ),
                    ),
                  ),
                  SizedBox(width: size.width * 0.01),
                  Expanded(
                    child: ElevatedButton(
                      onPressed: () => Navigator.of(context).pop(true),
                      style: ElevatedButton.styleFrom(
                        foregroundColor: Colors.white,
                        backgroundColor: const Color.fromRGBO(9, 159, 175, 1.0),
                        padding: EdgeInsets.symmetric(
                            vertical: size.height * 0.02),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      child: Text(
                        '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô|SUBMIT',
                        style: TextStyle(fontSize: fontSize),
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        );

        if (confirm) {
          setState(() {
            _isLoading = true;
          });

          await clearAllQueues(context);
          final provider = Provider.of<QueueProvider>(context, listen: false);
          await provider.reloadServices();

          if (mounted) {
            setState(() {});
          }

          debugPrint('‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
        }
      },
    ),
  ],
),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Color.fromRGBO(9, 159, 175, 1.0),
              Color.fromRGBO(9, 159, 175, 1.0)
            ],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: FutureBuilder<List<QueueModel>>(
          future: DatabaseHelper.instance.queryAll('queue_tb'),
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return const Center(child: CircularProgressIndicator());
            } else if (snapshot.hasError) {
              return Center(
                child: Text(
                  '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${snapshot.error}',
                  style: const TextStyle(color: Colors.white),
                ),
              );
            } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
              return const Center(
                child: Text(
                  '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
                  style: TextStyle(color: Colors.white),
                ),
              );
            }

            final data = snapshot.data!;
            return ListView.builder(
              padding: const EdgeInsets.all(8.0),
              itemCount: data.length,
              itemBuilder: (context, index) {
                final queue = data[index];
                return Card(
                  elevation: 4,
                  margin: const EdgeInsets.all(8.0),
                  // shape: RoundedRectangleBorder(
                  //   borderRadius: BorderRadius.circular(15),
                  // ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: [
                          Expanded(
                            flex: 1,
                            child: _buildText(
                              " ${queue.queueNo}",
                              fontSize * 1.5,
                              const Color.fromRGBO(9, 159, 175, 1.0),
                            ),
                          ),
                          Expanded(
                            flex: 1,
                            child: _buildText(
                              "N: ${queue.customerName}",
                              fontSize,
                              const Color.fromRGBO(9, 159, 175, 1.0),
                            ),
                          ),
                          Expanded(
                            flex: 1,
                            child: _buildText(
                              "T: ${queue.customerPhone}",
                              fontSize,
                              const Color.fromRGBO(9, 159, 175, 1.0),
                            ),
                          ),
                        ],
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Expanded(
                            flex: 1,
                            child: _buildText(
                              "Number\n${queue.queueNumber} PAX",
                              fontSize,
                              const Color.fromARGB(255, 144, 148, 148),
                            ),
                          ),
                          Expanded(
                            flex: 1,
                            child: _buildText(
                              "Queue\n${formatTimeOnly(queue.queueCreate ?? "")}",
                              fontSize,
                              const Color.fromARGB(255, 144, 148, 148),
                            ),
                          ),

                          // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
                          if (["‡∏û‡∏±‡∏Å‡∏Ñ‡∏¥‡∏ß", "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", "‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "‡∏à‡∏ö‡∏Ñ‡∏¥‡∏ß"]
                              .contains(queue.queueStatus))
                            Expanded(
                              flex: 1,
                              child: _buildText(
                                "${_getStatusText(queue.queueStatus)}\n${formatTimeOnly(queue.queueDatetime ?? "")}",
                                fontSize,
                                _getStatusColor(queue.queueStatus),
                              ),
                            ),

                          Expanded(
                            flex: 1,
                            child: _buildText(
                              "Status\n${queue.queueStatus}",
                              fontSize,
                              const Color.fromARGB(255, 144, 148, 148),
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                );
              },
            );
          },
        ),
      ),
    );
  }

  Widget _buildText(String text, double size, Color color) {
    return Text(
      text,
      style: TextStyle(
        fontSize: size,
        color: color,
      ),
      textAlign: TextAlign.center,
    );
  }
}
